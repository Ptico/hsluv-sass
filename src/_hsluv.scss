@use './conversions' as conv;
@use './conversions/xyz' as xyz;

@function hsluv($hue, $saturation: null, $lightness: null) {
  $hsluv: conv.args-hsl($hue, $saturation, $lightness);
  $rgb: conv.hsluv-rgb($hsluv);

  @return rgb(
    map-get($rgb, 'r'),
    map-get($rgb, 'g'),
    map-get($rgb, 'b')
  );
}

@function hpluv($hue, $saturation: null, $lightness: null) {
  $hpluv: conv.args-hsl($hue, $saturation, $lightness);
  $rgb: conv.hpluv-rgb($hpluv);

  @return rgb(
    map-get($rgb, 'r'),
    map-get($rgb, 'g'),
    map-get($rgb, 'b')
  );
}

@function hsluva($hue, $saturation: null, $lightness: null, $alpha: 1) {
  $hsluv: conv.args-hsl($hue, $saturation, $lightness);
  $rgb: conv.hsluv-rgb($hsluv);

  @return rgba(
    map-get($rgb, 'r'),
    map-get($rgb, 'g'),
    map-get($rgb, 'b'),
    $alpha
  );
}

@function hpluva($hue, $saturation: null, $lightness: null, $alpha: 1) {
  $hpluv: conv.args-hsl($hue, $saturation, $lightness);
  $rgb: conv.hpluv-rgb($hpluv);

  @return rgba(
    map-get($rgb, 'r'),
    map-get($rgb, 'g'),
    map-get($rgb, 'b'),
    $alpha
  );
}

@function hsluv-from($color) {
  @return conv.rgb-hsluv((
    'r': red($color),
    'g': green($color),
    'b': blue($color)
  ));
}

@function hpluv-from($color) {
  @return conv.rgb-hpluv((
    'r': red($color),
    'g': green($color),
    'b': blue($color)
  ));
}

@function contrast-darken($hsluv, $ratio: 4.5 / 1) {
  $h: map-get($hsluv, 'h');
  $s: map-get($hsluv, 's');
  $l: map-get($hsluv, 'l');

  $y: xyz.l-to-y($l);

  $maxY: (20 * $y - $ratio + 1) / (20 * $ratio);

  @return (
    'h': $h,
    's': $s,
    'l': xyz.y-to-l($maxY)
  );
}

@function contrast-lighten($hsluv, $ratio: 4.5 / 1) {
  $h: map-get($hsluv, 'h');
  $s: map-get($hsluv, 's');
  $l: map-get($hsluv, 'l');

  $y: xyz.l-to-y($l);

  $minY: (20 * $ratio * $y + $ratio - 1) / 20;

  @return (
    'h': $h,
    's': $s,
    'l': xyz.y-to-l($minY)
  );
}
