@use '../node_modules/sass-true' as *;

@import "../src/functions";

@include describe("from-linear") {
  @include it("should work") {
    @include assert-equal(from-linear(0.0001), 0.001292);
    @include assert-equal(from-linear(0.123), 0.3856017888563188);
    @include assert-equal(from-linear(12.3), 2.9467850436056042);
  }
}

@include describe("to-linear") {
  @include it("should work") {
    @include assert-equal(to-linear(0.001), 0.00007739938080495357);
    @include assert-equal(to-linear(0.123), 0.013970183234932964);
    @include assert-equal(to-linear(12.3), 366.95828400407856);
  }
}

@include describe("dot-product") {
  @include it("should work") {
    @include assert-equal(dot-product((2), (4)), 8);
    @include assert-equal(dot-product((1, 3), (4, 5)), 19);
    @include assert-equal(dot-product((5.23, 23.2, 1.2), (4.43, 5.42, 0.1)), 149.0329);
  }
}

@include describe("max-chroma-for-l-h") {
  @include it("should work") {
    @include assert-equal(max-chroma-for-l-h(12.4, 23.1), 27.278373488717314);
    @include assert-equal(max-chroma-for-l-h(0.4, 253), 0.77180722498895);
    @include assert-equal(max-chroma-for-l-h(4.4, 88.2), 4.864253310023044);
  }
}

@include describe("max-safe-chroma-for-l") {
  @include it("should work") {
    @include assert-equal(max-safe-chroma-for-l(12), 9.456750248530316);
    @include assert-equal(max-safe-chroma-for-l(1), 0.7880625207108596);
    @include assert-equal(max-safe-chroma-for-l(63.2), 49.805551308926326);
  }
}

@include describe("get-bounds") {
  @include it("should work") {
    @include assert-equal(get-bounds(10), ((-8.021739130434783, -63.70563018240983) (0.08726129137380577, -60.85087924830718) (1.3259649910233395, -36.49555417768104) (-0.025383977890972166, -61.34844034877459) (-0.12162162162162163, 11.091899201577185) (-0.007079328850638234, -56.69217925433503)));
    @include assert-equal(get-bounds(2), ((-8.021739130434913, -12.741126036482221) (0.0170096924679897, -12.1751222254702) (1.325964991023324, -7.299110835536257) (-0.004915695567671124, -12.194400945200037) (-0.12162162162162199, 2.2183798403154524) (-0.0014603083577337413, -12.003482999343335)));
    @include assert-equal(get-bounds(99), ((-8.021739130434915, -630.6857388058701) (108.51818322354428, -224.51295480575024) (1.3259649910233238, -361.30598635904465) (3.446083696490256, 24.709464627856743) (-0.121621621621622, 109.80980209561487) (-0.10246288422125033, -2.4343964767813757)));
  }
}

@include describe("length-of-ray-until-intersect") {
  @include it("should work") {
    @include assert-equal(length-of-ray-until-intersect(0.234, (2.43, 73.45)), null);
    @include assert-equal(length-of-ray-until-intersect(1.234, (2.43, 73.45)), 521.7064074364049);
  }
}

@include describe("intersect-line-line") {
  @include it("should work") {
    @include assert-equal(intersect-line-line((1.23, 3.45), (6.23, 3.11)), 0.06800000000000006);
  }
}

@include describe("distance-from-pole") {
  @include it("should work") {
    @include assert-equal(distance-from-pole((4.32, 5.23)), 6.783457820315537);
  }
}
